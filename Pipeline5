pipeline {
  agent {
    // all these stages, excluding stages have agent, is going to run on this agent label
    label 'dockeragent'
  }
  environment {
    registry = "jehaddocker82/my-smart-app"
    img = "$registry" + ":${env.BUILD_ID}"
    registryCredential = 'dockerhub-login' //withRegistry needs just credentialsId so give like this
    mailRecipients = "abujoj.2018@gmail.com, abujoj.2018@gmail.com"
    jobName = "${currentBuild.fullDisplayName}"
  }
  // options {
    // this option will Skip checking out code by default in all agents
    // all these agents are not going to get the code and it's not going to work
    //skipDefaultCheckout() 
  //}
  stages {
    stage('Checkout') {
      steps {
        echo "Check code is downloaded"
        //git branch: 'main', url: 'https://github.com/jehadkalifah/SmartFlaskAPP.git'
        sh 'ls -la'
      }
    }
    stage('Test, Coverage, Static Analysis, Report') {
      parallel {
        stage('Test & Coverage') {
          // Docker containers are run on the default Docker host
					// which set on Manage Jenkins - System - Declarative Pipeline (Docker) - Docker Label
          agent {
            docker {
              image 'python:3.10-slim-buster'
              // which user is going to run "root"
							// args '--user 0:0'
            }
          }
          steps {
            echo " Testing And Code Coverage"
            sh 'ls -la'
            sh 'pwd'
            sh returnStatus: true, script: 'bash ./jenkinsscript5.sh'
          }
          post {
            always {
              echo "PostStage: Publish Test Report"
              junit skipMarkingBuildUnstable: true, testResults: 'xmlReport/output.xml'
              cleanWs()
            }
          }
        }
        stage('StaticAnalysis') {
          agent {
            dockerfile {
              filename 'Dockerfile_pyagent'
            }
          }
          steps {
            echo "Doing Static Analysis"
            sh 'id'
            sh 'ls -la'
            //sh 'pip install flake8'
            sh returnStatus: true, script: 'flake8 main/ utests/ > flake8out.text'
          }
          post {
            always {
              echo "PostStage: Publish Static Analysis"
              // enable the records even for the failed builds and used tool is flake8
              recordIssues enabledForFailure: true, tool: flake8(pattern: '*.text')
              // workspace clean up
              // it set here because parallel stages are running on different agents
              cleanWs()
            }
          }
        }
      }
    }
    stage('Build Img') {
      steps {
        script {
          echo "Build docker image"
          println("${img}")
          // dockerImg = docker.build("${img}")
        }
      }
    }
    stage('Release') {
      steps {
        script {
          echo "Push to docker hub"
          //docker.withRegistry( 'https://registry.hub.docker.com ', registryCredential )  {
          //		dockerImg.push()
          //		dockerImg.push('latest') //one more push for latest tag
          //	}
        }
      }
    }
  }
  post {
    always {
      echo "POST stage: Sending Mail"
      emailext body: 'Pls go to ${BUILD_URL} and verify!',
        mimeType: 'text/html',
        subject: "[Jenkins] ${jobName} - ${currentBuild.currentResult}",
        to: "${mailRecipients}",
        from: "Jenkins",
        replyTo: "${mailRecipients}",
        attachLog: true
    }
    cleanup {
      // workspace clean up
      cleanWs()
    }
  }
}
